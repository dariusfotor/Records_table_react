{"ast":null,"code":"var _jsxFileName = \"/Users/darius/Desktop/Projects/hostinger/Records_table/src/components/tableComments.js\";\nimport React, { Component } from \"react\";\nimport \"../style/style.css\";\nimport Table from \"react-bootstrap/Table\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSort } from \"@fortawesome/free-solid-svg-icons\";\nimport { connect } from \"react-redux\";\nimport { fetchArticleDetails } from \"./fetchData\";\nimport SelectedComments from \"./selectedComments\";\nexport class tableComments extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = event => {\n      this.setState({\n        currentPage: Number(event.target.id)\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        todosPerPage: e.target.value,\n        btnTotalComments: false\n      });\n    };\n\n    this.allComments = () => {\n      this.setState({\n        btnTotalComments: true\n      });\n    };\n\n    this.clickedId = (id, i) => {\n      const selectId = this.props.comments.find(i => i.id === id);\n      const newId = [...this.state.selectedID, selectId];\n      this.setState({\n        selectedID: newId\n      });\n\n      if (i !== this.state.isActive) {\n        // const colorId = [...this.state.isActive, i];\n        this.setState({\n          isActive: i\n        });\n      }\n    };\n\n    this.sorted = sorted => {\n      this.setState({\n        sorted\n      });\n    };\n\n    this.state = {\n      currentPage: 1,\n      todosPerPage: 20,\n      valuePerPage: \"\",\n      sortedColumn: \"\",\n      direction: \"desc\",\n      selectedID: [],\n      isActive: null,\n      sorted: \"asc\",\n      btnTotalComments: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchArticleDetails();\n  }\n\n  render() {\n    console.log(this.state.sorted);\n    const _this$state = this.state,\n          currentPage = _this$state.currentPage,\n          todosPerPage = _this$state.todosPerPage,\n          btnTotalComments = _this$state.btnTotalComments;\n    const _this$props = this.props,\n          error = _this$props.error,\n          loading = _this$props.loading,\n          comments = _this$props.comments;\n\n    if (error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Error! \", error.message);\n    }\n\n    if (loading) {\n      return React.createElement(\"div\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Loading...\");\n    } // Pagination\n\n\n    const indexOfLastTodo = currentPage * todosPerPage;\n    const indexOfFirstTodo = indexOfLastTodo - todosPerPage;\n    const currentTodos = comments.slice(indexOfFirstTodo, indexOfLastTodo); // Mapping comments per page\n\n    const renderTodos = currentTodos.map((item, i) => {\n      return React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        key: item.id,\n        onClick: () => this.clickedId(item.id, i),\n        style: this.state.isActive === i ? {\n          background: \"green\"\n        } : {\n          background: \"none\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, item.id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, item.name, \" \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, item.email)));\n    });\n    const allComments = comments.map((item, i) => {\n      return React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        key: item.id,\n        onClick: () => this.clickedId(item.id, i),\n        style: this.state.isActive === i ? {\n          background: \"green\"\n        } : {\n          background: \"none\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        onClick: () => this.sorted(\"dsc\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, item.id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, item.name, \" \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, item.email)));\n    }); // Logic for displaying page numbers\n\n    const pageNumbers = [];\n\n    for (let i = 1; i <= Math.ceil(comments.length / todosPerPage); i++) {\n      pageNumbers.push(i);\n    }\n\n    const renderPageNumbers = pageNumbers.map(number => {\n      return React.createElement(\"ul\", {\n        className: \"pagination\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        key: number,\n        id: number,\n        onClick: this.handleClick,\n        className: \"page-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, number));\n    });\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(SelectedComments, {\n      selectedComments: this.state.selectedID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Irasu lentele\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Rodyti po\"), React.createElement(\"select\", {\n      value: this.state.todosPerPage,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"10\"), React.createElement(\"option\", {\n      value: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"20\"), React.createElement(\"option\", {\n      value: \"30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"30\"), React.createElement(\"option\", {\n      value: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"50\"), React.createElement(\"option\", {\n      value: \"70\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"70\")), React.createElement(\"button\", {\n      className: \"btnAllComments\",\n      onClick: this.allComments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Visi irasai\"), React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      className: \"thID\",\n      onClick: this.sortAscending,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"ID\", React.createElement(FontAwesomeIcon, {\n      className: \"thIcon\",\n      icon: faSort,\n      size: \"1x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), React.createElement(\"th\", {\n      onClick: this.sort,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Komentarai\", React.createElement(FontAwesomeIcon, {\n      className: \"thIcon\",\n      icon: faSort,\n      size: \"1x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })), React.createElement(\"th\", {\n      onClick: this.sort,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Email\", React.createElement(FontAwesomeIcon, {\n      className: \"thIcon\",\n      icon: faSort,\n      size: \"1x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })))), btnTotalComments ? allComments : renderTodos), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, renderPageNumbers));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    comments: state.comments,\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchArticleDetails\n})(tableComments);","map":{"version":3,"sources":["/Users/darius/Desktop/Projects/hostinger/Records_table/src/components/tableComments.js"],"names":["React","Component","Table","FontAwesomeIcon","faSort","connect","fetchArticleDetails","SelectedComments","tableComments","constructor","handleClick","event","setState","currentPage","Number","target","id","handleChange","e","todosPerPage","value","btnTotalComments","allComments","clickedId","i","selectId","props","comments","find","newId","state","selectedID","isActive","sorted","valuePerPage","sortedColumn","direction","componentDidMount","render","console","log","error","loading","message","indexOfLastTodo","indexOfFirstTodo","currentTodos","slice","renderTodos","map","item","background","name","email","pageNumbers","Math","ceil","length","push","renderPageNumbers","number","sortAscending","sort","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../style/style.css\";\nimport Table from \"react-bootstrap/Table\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSort } from \"@fortawesome/free-solid-svg-icons\";\nimport { connect } from \"react-redux\";\nimport { fetchArticleDetails } from \"./fetchData\";\nimport SelectedComments from \"./selectedComments\";\n\nexport class tableComments extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentPage: 1,\n      todosPerPage: 20,\n      valuePerPage: \"\",\n      sortedColumn: \"\",\n      direction: \"desc\",\n      selectedID: [],\n      isActive: null,\n      sorted: \"asc\",\n      btnTotalComments: false\n    };\n  }\n  componentDidMount() {\n    this.props.fetchArticleDetails();\n  }\n  handleClick = event => {\n    this.setState({\n      currentPage: Number(event.target.id)\n    });\n  };\n\n  handleChange = e => {\n    this.setState({\n      todosPerPage: e.target.value,\n      btnTotalComments: false\n    });\n  };\n\n  allComments = () => {\n    this.setState({\n      btnTotalComments: true\n    });\n  };\n  clickedId = (id, i) => {\n    const selectId = this.props.comments.find(i => i.id === id);\n    const newId = [...this.state.selectedID, selectId];\n    this.setState({\n      selectedID: newId\n    });\n    if (i !== this.state.isActive) {\n      // const colorId = [...this.state.isActive, i];\n      this.setState({\n        isActive: i\n      });\n    }\n  };\n  sorted = sorted => {\n    this.setState({ sorted });\n  };\n  render() {\n    console.log(this.state.sorted);\n    const { currentPage, todosPerPage, btnTotalComments } = this.state;\n    const { error, loading, comments } = this.props;\n    if (error) {\n      return <div>Error! {error.message}</div>;\n    }\n\n    if (loading) {\n      return <div className=\"loading\">Loading...</div>;\n    }\n    // Pagination\n    const indexOfLastTodo = currentPage * todosPerPage;\n    const indexOfFirstTodo = indexOfLastTodo - todosPerPage;\n    const currentTodos = comments.slice(indexOfFirstTodo, indexOfLastTodo);\n    // Mapping comments per page\n    const renderTodos = currentTodos.map((item, i) => {\n      return (\n        <tbody>\n          <tr\n            key={item.id}\n            onClick={() => this.clickedId(item.id, i)}\n            style={\n              this.state.isActive === i\n                ? { background: \"green\" }\n                : { background: \"none\" }\n            }\n          >\n            <td>{item.id}</td>\n            <td>{item.name} </td>\n            <td>{item.email}</td>\n          </tr>\n        </tbody>\n      );\n    });\n    const allComments = comments.map((item, i) => {\n      return (\n        <tbody>\n          <tr\n            key={item.id}\n            onClick={() => this.clickedId(item.id, i)}\n            style={\n              this.state.isActive === i\n                ? { background: \"green\" }\n                : { background: \"none\" }\n            }\n          >\n            <td onClick={() => this.sorted(\"dsc\")}>{item.id}</td>\n            <td>{item.name} </td>\n            <td>{item.email}</td>\n          </tr>\n        </tbody>\n      );\n    });\n    // Logic for displaying page numbers\n    const pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(comments.length / todosPerPage); i++) {\n      pageNumbers.push(i);\n    }\n    const renderPageNumbers = pageNumbers.map(number => {\n      return (\n        <ul className=\"pagination\">\n          <li\n            key={number}\n            id={number}\n            onClick={this.handleClick}\n            className=\"page-link\"\n          >\n            {number}\n          </li>\n        </ul>\n      );\n    });\n    return (\n      <div className=\"container\">\n        <SelectedComments selectedComments={this.state.selectedID} />\n        <h1>Irasu lentele</h1>\n        <label>Rodyti po</label>\n        <select value={this.state.todosPerPage} onChange={this.handleChange}>\n          <option value=\"10\">10</option>\n          <option value=\"20\">20</option>\n          <option value=\"30\">30</option>\n          <option value=\"50\">50</option>\n          <option value=\"70\">70</option>\n        </select>\n        <button className=\"btnAllComments\" onClick={this.allComments}>\n          Visi irasai\n        </button>\n        <Table striped bordered hover variant=\"dark\">\n          <thead>\n            <tr>\n              <th className=\"thID\" onClick={this.sortAscending}>\n                ID\n                <FontAwesomeIcon className=\"thIcon\" icon={faSort} size=\"1x\" />\n              </th>\n              <th onClick={this.sort}>\n                Komentarai\n                <FontAwesomeIcon className=\"thIcon\" icon={faSort} size=\"1x\" />\n              </th>\n              <th onClick={this.sort}>\n                Email\n                <FontAwesomeIcon className=\"thIcon\" icon={faSort} size=\"1x\" />\n              </th>\n            </tr>\n          </thead>\n          {btnTotalComments ? allComments : renderTodos}\n        </Table>\n        <ul>{renderPageNumbers}</ul>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    comments: state.comments,\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, { fetchArticleDetails })(tableComments);\n"]},"metadata":{},"sourceType":"module"}